//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Hsinpa/Action/CharacterAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Inputs
{
    public partial class @CharacterAction : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CharacterAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterAction"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""88d3b787-5292-462b-a432-7e757f2702c7"",
            ""actions"": [
                {
                    ""name"": ""Top"",
                    ""type"": ""Button"",
                    ""id"": ""2963022e-7a2d-41d2-8006-1da27e2a6e19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""abe1ed7e-1826-4d20-9cb5-28ed3451ef68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""92b7b521-d9bc-4e57-a937-1ea7e6280811"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""24d72129-41f6-48ae-8a85-04e39fb45e55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9e319776-4bda-4e34-b87a-123fcd182263"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Top"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c0f25c5-24de-4e46-87fa-b8441bac3c9d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Top"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ec873c8-5692-41b1-b78f-5366e7d7dba1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ddeb54c-db0c-4b7f-ae95-28b29b0003d9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49c6df5d-8676-48e2-8489-e5ee552c14d1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa572270-3c49-40cb-b883-55c5a29cb5e8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""feb32d18-d7e4-4b8d-9cda-67355908e581"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6bb5aed-a2ed-4a7c-8dde-f27a681c9ec0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Movement
            m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
            m_Movement_Top = m_Movement.FindAction("Top", throwIfNotFound: true);
            m_Movement_Down = m_Movement.FindAction("Down", throwIfNotFound: true);
            m_Movement_Left = m_Movement.FindAction("Left", throwIfNotFound: true);
            m_Movement_Right = m_Movement.FindAction("Right", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Movement
        private readonly InputActionMap m_Movement;
        private IMovementActions m_MovementActionsCallbackInterface;
        private readonly InputAction m_Movement_Top;
        private readonly InputAction m_Movement_Down;
        private readonly InputAction m_Movement_Left;
        private readonly InputAction m_Movement_Right;
        public struct MovementActions
        {
            private @CharacterAction m_Wrapper;
            public MovementActions(@CharacterAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @Top => m_Wrapper.m_Movement_Top;
            public InputAction @Down => m_Wrapper.m_Movement_Down;
            public InputAction @Left => m_Wrapper.m_Movement_Left;
            public InputAction @Right => m_Wrapper.m_Movement_Right;
            public InputActionMap Get() { return m_Wrapper.m_Movement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
            public void SetCallbacks(IMovementActions instance)
            {
                if (m_Wrapper.m_MovementActionsCallbackInterface != null)
                {
                    @Top.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnTop;
                    @Top.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnTop;
                    @Top.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnTop;
                    @Down.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnDown;
                    @Down.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnDown;
                    @Down.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnDown;
                    @Left.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeft;
                    @Left.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeft;
                    @Left.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeft;
                    @Right.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRight;
                    @Right.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRight;
                    @Right.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRight;
                }
                m_Wrapper.m_MovementActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Top.started += instance.OnTop;
                    @Top.performed += instance.OnTop;
                    @Top.canceled += instance.OnTop;
                    @Down.started += instance.OnDown;
                    @Down.performed += instance.OnDown;
                    @Down.canceled += instance.OnDown;
                    @Left.started += instance.OnLeft;
                    @Left.performed += instance.OnLeft;
                    @Left.canceled += instance.OnLeft;
                    @Right.started += instance.OnRight;
                    @Right.performed += instance.OnRight;
                    @Right.canceled += instance.OnRight;
                }
            }
        }
        public MovementActions @Movement => new MovementActions(this);
        public interface IMovementActions
        {
            void OnTop(InputAction.CallbackContext context);
            void OnDown(InputAction.CallbackContext context);
            void OnLeft(InputAction.CallbackContext context);
            void OnRight(InputAction.CallbackContext context);
        }
    }
}
